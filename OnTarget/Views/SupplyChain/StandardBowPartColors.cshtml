@model IEnumerable<OnTarget.Models.SupplyChain.StandardBowPartColorsModel>

@{
    ViewData["Title"] = "Standard Bow Part Colors";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<br />

<h1>Standard Bow Part Colors</h1>

@(Html.Kendo().Window()
    .Name("window")
    .Draggable()
    .Resizable()
    .Width(500)
    .Actions(actions => actions.Close())
    .Events(ev => ev.Close("onClose"))
    .Visible(false)

)

@(Html.Kendo().Grid<OnTarget.Models.SupplyChain.StandardBowPartColorsModel>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.ID).Hidden();
            columns.Bound(c => c.ParentItemCode).Width(120).HeaderHtmlAttributes(new { style = "text-align: center;" }).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").InputWidth(120).SuggestionOperator(FilterType.Contains)));
            columns.Bound(c => c.ChildItemCode).Width(120).HeaderHtmlAttributes(new { style = "text-align: center;" }).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").InputWidth(120).SuggestionOperator(FilterType.Contains)));
            columns.Bound(c => c.PartOrder).Width(100).HeaderHtmlAttributes(new { style = "text-align: center;" }).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").InputWidth(75).SuggestionOperator(FilterType.Contains)));
            columns.Bound(c => c.Color).Width(120).HeaderHtmlAttributes(new { style = "text-align: center;" }).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").InputWidth(120).SuggestionOperator(FilterType.Contains)));
            columns.Command(command => command.Destroy()).Width(65);
        })
        .HtmlAttributes(new { style = "height: 650px; width: 1000px" })
        .ToolBar(toolbar =>
        {
            toolbar.Create();
            toolbar.Save();
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Navigatable()
        .Sortable()
        .Scrollable()
        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(100)
        .ServerOperation(false)
        .Events(events => events.Error("error_handler").Sync("sync_handler"))
        .Model(model =>
        {
            model.Id(c => c.ID);
        })
        .Create("StandardBowPartColors_Insert", "SupplyChain")
        .Read("StandardBowPartColors_Load", "SupplyChain")
        .Update("StandardBowPartColors_Update", "SupplyChain")
        .Destroy("StandardBowPartColors_Destroy", "SupplyChain")
    )
)

<style>
    .k-widget {
        font-size: 13px
    }

    .k-grid {
        font-size: 9px;
    }
</style>

<script>
    $(function () {
        //Notice that the Name() of the Grid is used to get its client-side instance.
        var grid = $("#grid").data("kendoGrid");
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });

            $("#window").data("kendoWindow").center().title("Standard Bow Part Colors").content(message + '<br /><br /><button id="closeButton" onclick="closeWindow()" class="k-button">Close</button>').open();
            $("#undo").hide();
        }
    }

     function sync_handler(e) {
        this.read();
    }

    function onClose() {
        $("#undo").show();
    }

    function closeWindow() {
            $("#window").data("kendoWindow").close();
    }

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

